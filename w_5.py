from __future__ import print_function, division
from w_4 import *

def ChromosomeToCycle(l):
	nodes = []
	for i in range(0, len(l)):
		start = l[i]
		if start > 0:
			nodes.append(2*start - 1)
			nodes.append(2*start)
		else:
			nodes.append(-2*start)
			nodes.append(-2*start - 1)
	return nodes

def CycleToChromosome(nodes):
	l = []
	i = 0
	while i < len(nodes):
		if nodes[i] < nodes[i+1]:
			l.append(nodes[i+1]//2)
		else:
			l.append(-nodes[i+1]//2)
		i += 2
	return l

def ColoredEdges(P):
	edges = []
	for chromosome in P:
		nodes = ChromosomeToCycle(chromosome)
		i = 1
		while i < len(nodes) - 2:
			edges.append((nodes[i], nodes[i+1]))
			i += 2
		edges.append((nodes[len(nodes) - 1], nodes[0]))

	return edges

def GraphToGenome(genome_graph):
	P = []
	i = 0
	while i < len(genome_graph):
		chromosome = []
		tup = genome_graph[i]
		current = tup[0]
		if tup[0]%2 == 0:
			find = tup[0] - 1
		else:
			find = tup[0] + 1
		chromosome.append(current)
		chromosome.append(tup[1])
		i += 1
		while i < len(genome_graph):
			tup = genome_graph[i]
			chromosome.append(tup[0])
			chromosome.append(tup[1])
			i += 1
			if tup[1] == find:
				P.append(chromosome)
				break
	genome = []
	for cycle in P:
		x = cycle.pop()
		cycle = [x] + cycle
		genome.append(Format(CycleToChromosome(cycle)))
	return ''.join(genome)


'''
x = '+1 -2 -3 +4'
x = x.split(' ')
l = []
for num in x:
	if num[0] == '-':
		num = -1*int(num[1:])
		l.append(num)
	else:
		num = int(num[1:])
		l.append(num)
		
nodes = ChromosomeToCycle(l)
nodes = [str(i) for i in nodes]
nodes = '(' + ' '.join(nodes) + ')'
print(nodes)
'''
'''
x = '2 1 3 4 6 5 8 7 9 10 12 11 13 14 15 16 18 17 19 20 22 21 23 24 25 26 28 27 29 30 31 32 34 33 36 35 38 37 39 40 42 41 44 43 46 45 47 48 49 50 52 51 53 54 56 55 57 58 60 59 61 62 64 63 66 65 68 67 69 70 72 71 73 74 75 76 77 78 80 79 81 82 84 83 86 85 88 87 89 90 92 91 93 94 96 95 97 98 99 100 101 102 104 103 105 106 108 107 110 109 112 111 114 113 115 116 118 117 119 120 122 121'
x = x.split(' ')
nodes = [int(i) for i in x]
print(Format(CycleToChromosome(nodes)))
''' 
'''
x = '-1 -2 +3 +4 +5 +6 +7 +8 -9 -10 +11 -12 +13 +14 -15 +16 +17 -18 +19 +20 +21 -22 +23 +24 +25 -26 -27 -28 +29 +30)(-31 -32 -33 -34 -35 +36 +37 +38 -39 -40 -41 -42 +43 +44 +45 +46 -47 +48 -49 -50 +51 +52 +53 +54 -55 -56 -57 +58 +59 +60 -61)(+62 -63 +64 -65 +66 +67 -68 +69 +70 +71 +72 -73 -74 +75 +76 +77 -78 +79 +80 -81 -82 +83 +84 -85 +86)(-87 -88 +89 +90 -91 -92 -93 +94 -95 +96 +97 +98 +99 +100 +101 +102 +103 +104 +105 +106 -107 -108 -109 -110 +111)(-112 -113 -114 +115 -116 +117 -118 -119 -120 -121 -122 -123 +124 +125 +126 +127 -128 -129 -130 -131 -132 +133 -134 +135)(+136 -137 +138 +139 +140 +141 +142 -143 -144 +145 -146 -147 +148 +149 +150 +151 -152 -153 -154 +155 -156 -157 +158 +159 +160 +161 +162 +163 -164)(-165 -166 -167 +168 -169 -170 +171 -172 -173 +174 -175 -176 -177 +178 +179 -180 -181 +182 +183 -184 +185 +186 +187 -188 +189 -190)(-191 -192 -193 +194 -195 -196 -197 +198 -199 +200 +201 +202 +203 +204 -205 +206 +207 +208 +209 +210 +211 -212 -213 -214'
x = x.split(')(')
for i in range(0, len(x)):
	l = []
	item = x[i].split(' ')
	for num in item:
		if num[0] == '-':
			num = -1*int(num[1:])
			l.append(num)
		else:
			num = int(num[1:])
			l.append(num)
	x[i] = l
print(ColoredEdges(x))
'''

genome_graph = [(2, 3), (4, 6), (5, 8), (7, 9), (10, 11), (12, 13), (14, 16), (15, 18), (17, 19), (20, 21), (22, 23), (24, 26), (25, 28), (27, 30), (29, 31), (32, 33), (34, 36), (35, 37), (38, 40), (39, 42), (41, 44), (43, 1), (45, 48), (47, 50), (49, 51), (52, 54), (53, 56), (55, 57), (58, 59), (60, 61), (62, 63), (64, 66), (65, 67), (68, 69), (70, 72), (71, 73), (74, 76), (75, 77), (78, 80), (79, 82), (81, 84), (83, 85), (86, 87), (88, 90), (89, 91), (92, 93), (94, 95), (96, 97), (98, 100), (99, 102), (101, 103), (104, 46), (105, 108), (107, 110), (109, 111), (112, 114), (113, 116), (115, 117), (118, 120), (119, 121), (122, 124), (123, 126), (125, 127), (128, 130), (129, 131), (132, 134), (133, 135), (136, 138), (137, 140), (139, 142), (141, 144), (143, 146), (145, 147), (148, 106), (150, 151), (152, 153), (154, 156), (155, 158), (157, 160), (159, 162), (161, 164), (163, 165), (166, 168), (167, 170), (169, 171), (172, 174), (173, 176), (175, 178), (177, 179), (180, 181), (182, 184), (183, 186), (185, 188), (187, 190), (189, 192), (191, 193), (194, 195), (196, 149), (198, 199), (200, 201), (202, 203), (204, 206), (205, 208), (207, 209), (210, 212), (211, 214), (213, 216), (215, 217), (218, 219), (220, 222), (221, 224), (223, 225), (226, 228), (227, 230), (229, 232), (231, 234), (233, 235), (236, 238), (237, 240), (239, 241), (242, 244), (243, 246), (245, 248), (247, 197), (250, 251), (252, 254), (253, 256), (255, 257), (258, 259), (260, 262), (261, 263), (264, 265), (266, 267), (268, 269), (270, 272), (271, 273), (274, 275), (276, 278), (277, 279), (280, 281), (282, 284), (283, 285), (286, 288), (287, 289), (290, 291), (292, 294), (293, 295), (296, 297), (298, 300), (299, 301), (302, 303), (304, 306), (305, 308), (307, 249), (309, 311), (312, 313), (314, 316), (315, 317), (318, 319), (320, 321), (322, 324), (323, 325), (326, 327), (328, 329), (330, 332), (331, 333), (334, 336), (335, 338), (337, 339), (340, 341), (342, 344), (343, 345), (346, 348), (347, 310), (350, 352), (351, 353), (354, 356), (355, 357), (358, 359), (360, 361), (362, 363), (364, 366), (365, 368), (367, 370), (369, 371), (372, 374), (373, 376), (375, 378), (377, 380), (379, 382), (381, 383), (384, 385), (386, 388), (387, 389), (390, 391), (392, 349), (393, 395), (396, 398), (397, 400), (399, 402), (401, 403), (404, 405), (406, 408), (407, 409), (410, 412), (411, 413), (414, 416), (415, 417), (418, 420), (419, 422), (421, 423), (424, 425), (426, 427), (428, 430), (429, 431), (432, 433), (434, 436), (435, 437), (438, 440), (439, 442), (441, 443), (444, 446), (445, 394)]
print(GraphToGenome(genome_graph))

